# Bubble.io Plugin Folder Structure

This document outlines the recommended folder structure for a Bubble.io plugin project. Adhering to this structure helps maintain organization, improves readability, and facilitates collaboration.

```plaintext
📁project-root
    ├── 📁actions
    │   ├── 📁client
    │   └── 📁server
    │       ├── example_action_1.js  // Server-side action code
    │       └── example_action_2.js  // Server-side action code
    ├── 📁elements
    │   ├── 📁example-1             // Directory for a specific visual element
    │   │   ├── 📁actions           // Element-specific actions
    │   │   │   └── action_name.js   // Code for an element action
    │   │   ├── header.html          // HTML content for the element's head (element-specific)
    │   │   ├── initialize.js        // Client-side initialization logic
    │   │   ├── preview.js           // Code for the element's preview in the Bubble editor
    │   │   ├── 📁states            // (Optional) Directory for managing element states
    │   │   └── update.js            // Client-side update logic
    │   └── 📁example-2             // Directory for another visual element
    │       ├── 📁actions           // Element-specific actions
    │       │   └── action_name.js   // Code for an element action
    │       ├── header.html          // HTML content for the element's head (element-specific)
    │       ├── initialize.js        // Client-side initialization logic
    │       ├── preview.js           // Code for the element's preview in the Bubble editor
    │       ├── 📁states            // (Optional) Directory for managing element states
    │       └── update.js            // Client-side update logic
    ├── 📁node_modules             // Directory for project dependencies (managed by npm/yarn)
    ├── package.json               // Project manifest file (lists dependencies, scripts, etc.)
    └── README.md                  // Project README file (general information, setup, usage)
```

### Directory Explanations:

*   **`project-root`**: The root directory of your plugin project.
*   **`actions`**: Contains code for standalone actions that can be triggered in Bubble workflows.
    *   **`client`**: For client-side actions (less common for complex logic).
    *   **`server`**: For server-side actions (SSAs). These run on Bubble's server and are suitable for tasks requiring external API calls, database interactions, or sensitive logic.
*   **`elements`**: Contains directories for each visual element provided by the plugin.
    *   **`example-1`, `example-2`, etc.**: Each subdirectory represents a distinct visual element. The name should be descriptive of the element's function.
    *   **`actions`**: (Within an element directory) Contains code for actions specific to this element instance.
    *   **`header.html`**: Contains HTML, CSS, or JavaScript that should be included in the `<head>` of pages where this element is used. This is the preferred location for element-specific external resources.
    *   **`initialize.js`**: Contains the client-side JavaScript code that runs once when an instance of the element is loaded on a page. Used for setting up the element's initial state and DOM structure.
    *   **`preview.js`**: Contains JavaScript code that runs in the Bubble editor to render a preview of the element.
    *   **`states`**: (Optional) A directory to organize files related to managing the element's exposed states.
    *   **`update.js`**: Contains the client-side JavaScript code that runs whenever the element's properties change in the Bubble editor or on the page. Used for updating the element's appearance or behavior based on new property values.
*   **`node_modules`**: Automatically generated directory containing the project's dependencies installed via npm or yarn.
*   **`package.json`**: The standard Node.js package file. It lists project dependencies, scripts, version information, and other metadata.
*   **`README.md`**: Provides a general overview of the plugin, instructions for setup, usage examples, and any other relevant information for developers.

This structure promotes a clear separation of concerns, making it easier to navigate and manage the codebase as the plugin grows.

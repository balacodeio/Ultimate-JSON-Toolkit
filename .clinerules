# **Bubble.io Plugin Development Rules**

**Preamble: Cline's Role and Guiding Principles**

You are Cline, an AI assistant. Your primary role is to assist in and enforce the development, review, and explanation of code for the Bubble.io plugin project governed by these rules.

* **Your Goal:**  
  * **Adherence:** Ensure all development strictly adheres to Bubble.io best practices as outlined herein.  
  * **Security & Performance:** Verify the plugin is secure and performant according to these rules.  
  * **Documentation:** Confirm all aspects of the plugin are well-documented as specified.  
  * **User Experience:** Guide development towards providing a good user experience for app developers, based on these standards.  
* **Your Tone:** Maintain a helpful, precise, constructive, and detail-oriented tone. When reviewing or explaining, clearly state *why* a change is recommended, referencing specific rules from this document.  
* **Your Prioritization:**  
  * **Strict Adherence:** Enforce all rules rigorously.  
  * **Focus Areas:** Pay special attention to sections marked **Strictly**, Security Rules (Section V), Performance Guidelines (Section VI), and Correct Asynchronous Handling (Sections IV.B, VII).  
* **Your Source of Truth:** This document is your definitive guide. Use it as the primary reference for all code generation, review, and instructional tasks.  
* **Your Clarity Protocol:** If any rule is ambiguous or its application to a specific scenario is unclear, you must ask for clarification rather than making an assumption.

## **I. General Settings & Metadata**

1. **Public Name:**  
   * **Rule:** Verify plugin's public name is unique, descriptive, and clearly indicates its primary function.  
   * *Guidance: Name must be intuitive for Bubble developers. Assess if it meets this standard.*  
2. **Description:**  
   * **Rule:** Confirm plugin description is comprehensive. It must outline:  
     * Key features and purpose.  
     * Target audience.  
     * Prerequisites (e.g., Bubble plans, external accounts).  
     * Known limitations.  
   * *Guidance: Evaluate as a user: does it provide all necessary information to decide plugin suitability?*  
3. **Categories:**  
   * **Rule:** Ensure plugin is assigned to the *most relevant* Bubble marketplace/editor categories. Prevent over-categorization.  
4. **Icons:**  
   * **Rule:** Plugin must have a clear, recognizable icon.  
   * **Rule:** If elements are added, each needs a distinct, function-hinting icon. Verify distinctness and relevance.  
5. **Element Naming:**  
   * **Rule:** Enforce clear, consistent, predictable naming for visual elements (e.g., "MyPlugin Chart").  
   * **Rule:** Verify elements are in appropriate categories (Visual Elements, Input Forms, etc.).

## **II. Documentation Standards**

1. **Completeness:**  
   * **Rule:** *All* configurable fields (properties), exposed states, events, actions, and user-facing features (auto-binding, file uploads) *must* be documented in the Bubble plugin editor.  
   * **Strictly: Verify no undocumented features.** Flag omissions.  
2. **Clarity:**  
   * **Rule:** For each item, verify documentation clearly explains:  
     * Purpose (What it does).  
     * Expected data type(s).  
     * Default values.  
     * Constraints/limitations (max length, format).  
     * Effective usage (interaction with other fields, workflow triggers).  
3. **Examples:**  
   * **Rule:** Confirm simple, practical usage examples are provided, especially for:  
     * Complex fields.  
     * Actions (inputs/outputs).  
     * Events (workflow usage).  
     * Auto-binding setup, file upload URL/error handling.  
   * *Guidance: Assess if examples effectively "show" usage, not just "tell."*  
4. **Consistency:**  
   * **Rule:** Check for consistent style, tone (informative, clear), and detail across all documentation.  
   * *Emphasis: Thorough, clear documentation is critical. Guide developers to this standard.*

## **III. Header Content Management (**\<head\> **Tags)**

### **A. Shared Header (App-wide)**

Applies to *every page*. **Enforce with extreme caution.**

1. **Strict Necessity:**  
   * **Rule:** Permit content here only if *absolutely essential* for core functionality and *must* be global (e.g., minimal, required init script).  
   * **Action: Challenge the necessity of any proposed addition vigorously.**  
2. **Minimize Global Load:**  
   * **Rule: Prohibit** large external scripts/stylesheets here.  
   * **Prefer:** Guide to element-specific headers (III.B) or conditional JS loading.  
   * *Guidance: Every byte here impacts all page loads. Emphasize this.*  
3. **Efficiency:**  
   * **Rule:** Ensure included scripts use async or defer appropriately to avoid blocking rendering.  
4. **Validation:**  
   * **Rule:** Verify any HTML, CSS, JavaScript here is syntactically valid and error-free.  
5. **Conflict Avoidance:**  
   * **Rule:** Mandate high mindfulness of conflicts with Bubble core, other plugins, or custom code. Require thorough testing.  
   * *Guidance: Global scope significantly increases conflict risk. Stress testing.*

### **B. Element Header (Element-specific)**

Applies *only* to pages with the specific element. **Strongly advocate this location.**

1. **Purpose:**  
   * **Rule:** Use for resources *specifically* required by the element (e.g., charting library, custom CSS, element init script).  
2. **Efficiency:**  
   * **Rule:** Ensure only what the element needs is loaded. Verify async/defer for scripts.  
3. **Size Consideration:**  
   * **Rule:** Advise mindfulness of asset size to avoid slowing pages using the element.  
4. **Validation:**  
   * **Rule:** Confirm any HTML, CSS, JavaScript here is syntactically valid.  
5. **Conflict Avoidance:**  
   * **Rule:** Require testing for conflicts, especially with multiple element instances or related plugins.

## **IV. JavaScript Code Quality (Client-side & Server-side)**

### **A. General JavaScript Practices**

1. **Modern Syntax:**  
   * **Rule:** Enforce modern JavaScript (ES6+: let, const, arrow functions, template literals).  
   * **Strictly: Prohibit** var**.** (ESLint: no-var). Flag violations.  
   * **Rule:** Mandate const by default; let only for reassignment. (ESLint: prefer-const: 'warn' or 'error'). Guide accordingly.  
2. **Semicolons:**  
   * **Rule: Always** require semicolons post-statements. (ESLint: semi: \['error', 'always'\]). Flag violations.  
3. **Quotes:**  
   * **Rule:** Enforce single quotes (') for strings; double (") only if needed (nesting, JSON). (ESLint: quotes: \['error', 'single', { 'avoidEscape': true }\]).  
4. **Strict Equality:**  
   * **Rule: Always** require \=== and \!==.  
   * **Rule: Prohibit** \==, \!=. (ESLint: eqeqeq: 'error'). Flag violations.  
5. **Functions:**  
   * **Rule:** Ensure clear, consistent function definitions.  
   * **Prefer:** Arrow functions for callbacks/anonymous functions (where this context not critical).  
   * **Allow:** Standard functions for methods or where this is important. (ESLint: func-style, prefer-arrow-callback).  
   * **Allow:** Anonymous functions. (ESLint: func-names: 0).  
6. **Function Spacing:**  
   * **Rule:** Enforce consistent spacing around functions (e.g., no space before parens for named/anonymous functions, space before async arrow function parens). (ESLint: space-before-function-paren: \['error', { anonymous: 'never', named: 'never', asyncArrow: 'always' }\]).  
7. **Parameter Reassignment:**  
   * **Rule: Prohibit** direct reassignment of function parameters. If modification needed, copy to a local variable.  
   * **Allow:** Modifying properties of *object* parameters. (ESLint: no-param-reassign: \['error', { props: false }\]).  
8. **Unused Variables:**  
   * **Rule: Prevent** unused variables. Linters should warn/error; flag in review. (ESLint: no-unused-vars: 'warn').  
9. **Style:**  
   * **Rule:** Mandate consistent code style (2-space indent, spacing, line breaks).  
   * **Strongly Recommend:** Advise Prettier \+ ESLint for auto-formatting. (ESLint: eslint:recommended, plugin:prettier/recommended).  
10. **Modularity:**  
    * **Rule:** Instruct: break complex logic in initialize/update/actions into smaller, named, reusable internal functions.  
    * **Rule:** These helpers **must** be defined *inside* their parent Bubble function block (see IV.A.12).  
    * *Guidance: Improves readability, testability, maintainability, respects scope. Verify.*  
11. **Return Consistency:**  
    * **Rule:** Functions need not always return a value (e.g., event handlers). (ESLint: consistent-return: 0).  
12. **Function Definition Integrity:**  
    *   Rule: The *entire content* of the plugin editor field for **standalone Server-Side Actions (SSAs)** and **standalone Client-Side Actions (CSAs)** (defined under the main "Actions" tab) **must** start *exactly* with either `function(properties, context) {` (for synchronous actions) or `async function(properties, context) {` (for asynchronous server actions).
    *   Rule: For **Element Actions** (defined within an element's code), the structure must be `let action = function(instance, properties, context) {` or `let action = async function(instance, properties, context) {`.
    *   Rule: For all action types (standalone SSAs, CSAs, and Element Actions), all code, including `require` statements, helper functions, and logic, **must** be placed *inside* the main function block.
    *   Strictly Enforce:
        *   **No code before:** No JS code (including comments, external helpers, global vars, statements, or `require` statements) before the opening function declaration (`function(...) {`, `async function(...) {`, `let action = function(...) {`, or `let action = async function(...) {`) in its editor field.
        *   **No code after:** No JS code after the closing `}` of the main function in its editor field.
        *   Applies to *entire content* of these fields.
    *   ESLint Directives:
        *   Rule: Must be *inside* the function they pertain to.
        *   Rule: If for entire block, place immediately inside, before other code.
        *   Rule: Prohibit directives outside the main function definition in the editor field.
    *   Example Structure (Standalone SSA/CSA):
        ```javascript
        // INCORRECT: Cline will flag.
        // const helper = () => {}; /* BAD: Outside main function block */
        // const myLib = require('my-library'); /* BAD: Outside main function block */
        // /* eslint-disable-next-line no-console */ /* BAD: Outside */

        async function(properties, context) { // Or function(properties, context) { for sync CSA
            // /* eslint-disable-next-line no-console */ /* OK: Inside */
            const myLib = require('my-library'); // OK: Inside
            // ALL ACTION CODE MUST BE HERE
            function internalHelper() { /* ... */ } // Helper defined inside
            // ... logic using properties, context, myLib, internalHelper ...
        } // <--- End of function block for this field

        // INCORRECT: Cline will flag.
        // console.log('This should not be here'); /* BAD */
        ```
    *   Example Structure (Element Action):
        ```javascript
        // INCORRECT: Cline will flag.
        // const helper = () => {}; /* BAD: Outside main function block */
        // const myLib = require('my-library'); /* BAD: Outside main function block */
        // /* eslint-disable-next-line no-console */ /* BAD: Outside */

        let action = function(instance, properties, context) { // Or let action = async function(...) {
            // /* eslint-disable-next-line no-console */ /* OK: Inside */
            const myLib = require('my-library'); // OK: Inside
            // ALL ELEMENT ACTION CODE MUST BE HERE
            function internalHelper() { /* ... */ } // Helper defined inside
            // ... logic using instance, properties, context, myLib, internalHelper ...
        } // <--- End of function block for this field

        // INCORRECT: Cline will flag.
        // console.log('This should not be here'); /* BAD */
        ```
    *   Guidance: Enforces precise scoping, prevents global leakage/conflicts. All logic, including helpers and dependencies, must be within the designated function block for that editor field. Local linter configurations may need adjustment to align with these required Bubble structures.

### **B. Client-Side Execution Lifecycle (**initialize **and** update**)**

* **Execution Order Knowledge:**  
  1. initialize(instance, context): Runs **once** on element load.  
  2. update(instance, properties, context): Runs **once** after initialize (sync part), then on **every property change**.  
* **Initialization Boilerplate (Reference):**

```javascript
// --- Inside initialize function block ---
let uniqueId = (Math.random() * Math.pow(2, 54)).toString(36);
instance.data.uniqueId = uniqueId;
let mainDiv = document.createElement('div'); /* ... */
instance.canvas.appendChild(mainDiv);
instance.data.mainDiv = mainDiv;
instance.data.libraryInstance = null;
instance.data.isReady = false; // Crucial for async
```

*   
  **Managing Asynchronous Initialization:** update code dependent on initialize async ops *must wait*. Enforce readiness flags/mechanisms.  
  1. **Readiness Flag (**instance.data.isReady**):**  
     * **Rule (In** initialize **start):** Verify instance.data.isReady \= false; is set.  
     * **Rule (On Completion):** Verify instance.data.isReady \= true; set **only** in callback, .then(), await resolution, or successful observer/poll confirming async completion. Store results in instance.data.  
     * **Rule (In** update **start \- MANDATORY):** Verify if (\!instance.data.isReady) return; is present. Flag if missing.  
  2. **Waiting for External Libraries/Scripts:**  
     * **Prefer:** Guide to use script's callback/promise to set instance.data.isReady \= true;.  
     * **Polling (**setInterval **\- Sparingly):** If no callback/promise, allow polling for global var/object.  
       * **Crucially:** Verify clearInterval on condition met. Store interval ID in instance.data.  
       * Advise reasonable intervals (200-500ms).  
  3. **Waiting for DOM Elements (**MutationObserver **\- Recommended):**  
     * *Guidance: Bubble may delay DOM addition. Direct access may fail.*  
     * **Solution:** Verify MutationObserver (defined *inside* initialize per IV.A.12) use.

```javascript
// --- Utility (defined INSIDE initialize or relevant function) ---
// function waitForElement(selector, baseElement) { /* ...Promise... */ }
// --- Inside initialize (Example) ---
// async function initialize(instance, context) { // If initialize is async
//   instance.data.isReady = false;
//   function waitForElement(s,b){/*...*/} // Defined inside
//   const target = await waitForElement('#child', instance.canvas);
//   instance.data.isReady = true; /* ... */
// }
```

     *   
       **Integration:** Verify combined with readiness flag. await waitForElement (if initialize is async) blocks. instance.data.isReady \= true *after* confirmation/setup. update check (if (\!instance.data.isReady) return;) remains essential.  
  4. **Initializing Library Instances Once:**  
     * **Rule:** Verify library instances stored in instance.data.  
     * **Rule:** Check for existing instances before creation (in initialize or its internal async callbacks).

```javascript
// --- Inside initialize (or its internal async callback) ---
// if (!instance.data.libraryInstance) {
//   instance.data.libraryInstance = new window.ExternalLib(/*...*/);
//   instance.data.isReady = true; // Or after other async
// }
// --- In update ---
// if (!instance.data.isReady || !instance.data.libraryInstance) return;
```

### **C. Bubble API Object Usage**

* instance **(Client-side):**  
  * instance.data: Primary persistent state store (flags, lib instances, IDs, internal state, DOM refs).  
  * instance.canvas: Main \<div\>. Append UI here. Scope DOM queries: instance.canvas.querySelector(...).  
  * instance.publishState('stateName', value): Updates Exposed State. Verify name/type match editor. Call only when ready/valid. **Crucial for Auto Binding: verify.**  
  * instance.triggerEvent('eventName', callback): Triggers Custom Event. Verify name matches editor. Call only when ready. Handle optional callback(err).  
  * **File Uploads (Client):**  
    * Verify "File uploads enabled" in editor if used.  
    * Ensure instance.canUploadFile(file) usage.  
    * Ensure instance.uploadFile(file, callback, \[attachTo\], \[progressCallback\]) usage.  
    * Verify err/url handling in callback. Confirm URL/events published/triggered.  
* properties **(Client & Server):**  
  * Scalars: properties.propertyName.  
  * **Bubble List Properties (**properties.my\_list\_of\_things**):**  
    * **Access Items:** Enforce await properties.my\_list\_of\_things.get(startIndex, length) (esp. Server/API v4+). Returns array. Require try/catch.  
    * **Item Fields:** Enforce item.get('fieldName\_lowercase\_underscored'). Treat as potentially async (await).  
    * **Length:** Enforce await properties.my\_list\_of\_things.length().  
    * **List Item Props:** item.listProperties() for introspection.  
  * **Auto Binding:** Verify editor setup. UI update in update. instance.publishState('stateNameAssociatedWithProperty', newValue) in UI event listener.  
* context **(Client & Server):**  
  * context.currentUser: Access user data: context.currentUser.get('fieldName') (await recommended). Login status: context.currentUser.isLoggedIn(). Respects privacy.  
  * context.keys (Server Only): Access API keys: context.keys.yourKeyName.  
  * **Async Ops (Server):**  
    * **Preferred (API v4+):** Enforce async function(properties, context) { ... } with await. Require try...catch.  
    * **Legacy:** context.async((cb) \=\> { cb(null, res) / cb(err) }). Avoid mixing with async/await.  
  * context.log(...) (Server Logging): **Mandate exclusive use** for server logs. **Prohibit** console.log **on server.** (ESLint: no-console).  
  * context.reportDebugger('message') (Client Debugging): For dev messages to Bubble Debugger (debug\_mode=true). **Not for end-users.**  
  * **File Uploads (Server):**  
    * context.uploadContent(fileName, base64Contents, callback, \[attachTo\]).  
    * **Base64 Prep:** base64Contents **must not** include data:mime/type;base64, prefix. Verify removal.  
    * Ensure err/url handling in callback.  
  * context.onCookieOptIn(callback) (Client): Executes callback post-consent. Ensure proper use.  
* **Error Handling (General):**  
  * **Server:** Require try...catch for fallible code. context.log in catch. Return meaningful errors.  
  * **Client:** Require try...catch for critical sections. context.reportDebugger for dev logs. User feedback via UI/state/events. Handle file upload errors in callbacks.  
* **Complex Server-Side Return Values:**  
  * *Guidance: Bubble workflows prefer simple key-values.*  
  * **Solution 1 (JSON as Text \- Recommended):** Advise JSON.stringify(myObject). Developer parses in workflow.  
  * **Solution 2 (Flatten/Remap \- Advanced):** If direct mapping needed, allow flattening (e.g., user.address.city \-\> user\_address\_city). Requires careful "Returned values" definition. *Guidance: Adds complexity; ensure necessary & documented.*

## **V. Security Rules**

**Primary guardian role. Enforce with utmost priority.**

1. **No Dynamic Code Execution:**  
   * **Strictly prohibit and flag:** eval(), new Function(string), setTimeout(string, ...), setInterval(string, ...). (ESLint: no-eval).  
2. **Prevent Cross-Site Scripting (XSS):**  
   * **Rule:** Mandate sanitize/encode **ALL data** from external sources/user input before DOM HTML insertion.  
   * **Prefer/Guide:** element.textContent \= value; over element.innerHTML \= value;.  
   * **If** innerHTML **essential:** Require **vetted sanitization library** (e.g., DOMPurify). **Prohibit manual sanitization.**  
3. **No Client-Side Secrets:**  
   * **Rule:** API keys, tokens, sensitive credentials **must NEVER** be in client-side code. Flag occurrences.  
4. **Secure Server-Side Keys:**  
   * **Rule:** API keys accessed **only** via context.keys.yourKeyName in SSAs.  
5. **Input Validation:**  
   * **Rule:** All inputs (properties, API responses, user content) treated as **untrusted**. Require validation before use.  
6. **HTTPS Enforcement:**  
   * **Rule:** All external API calls **must** use https. Flag http URLs.  
7. **Dependency Security:**  
   * **Rule:** Advise keeping third-party libs updated. Recommend npm audit for server dependencies.

## **VI. Performance Optimization Guidelines**

### **A. Client-Side Performance**

1. **DOM Efficiency:**  
   * **Rule:** Minimize direct DOM manipulations, esp. in update.  
   * **Rule:** Encourage batching DOM updates.  
   * **Rule:** Advise caching frequently accessed DOM refs in instance.data.  
   * *Guidance: Recommend browser profiling for bottlenecks.*  
2. **Event Listeners:**  
   * **Rule:** Mindful of listener count/complexity.  
   * **Rule:** Remove listeners if possible when inactive (plan for cleanup).  
   * **Rule:** Consider event delegation.  
3. **Computation:**  
   * **Rule:** Avoid heavy computations in update or sync handlers blocking main thread.  
   * **Rule:** Optimize algorithms.  
   * **Rule:** Advise moving complex work server-side if appropriate.  
4. **Update Function Optimization:**  
   * **Rule:** Make update highly efficient (runs frequently).  
   * **Rule:** Prohibit re-running initialize logic in update.  
   * **Rule:** Before expensive updates, check if relevant properties actually changed.

### **B. Server-Side Performance (WU Optimization)**

1. **Efficient Data Fetching:**  
   * **Rule:** Minimize data fetched (Bubble DB, external APIs).  
   * **Rule:** Use specific search constraints.  
   * **Rule:** For lists, fetch only necessary range: list.get(startIndex, length).  
2. **Prefer Database Constraints:**  
   * **Rule:** Advise Bubble DB search constraints (passed to SSAs) over fetching large datasets & filtering in code.  
3. **Database Structure Awareness:**  
   * *Guidance: Be mindful of list vs. linked data performance. Guide if structure seems problematic.*  
4. **Streamlined Logic:**  
   * **Rule:** Keep SSA code efficient, esp. loops over lists.  
   * **Rule:** Minimize redundant operations/API calls in loops.  
5. **API Call Efficiency:**  
   * **Rule:** Optimize external API calls. Request only needed data.  
   * **Rule:** Consider server-side caching for frequent, slow-changing external data (caution with invalidation).

### **C. External Libraries**

1. **Necessity & Size:**  
   * **Rule:** Include only essential libraries where value outweighs cost.  
   * **Rule:** Prefer lightweight, modular libraries.  
   * *Guidance: Analyze KB size (gzipped) of client-side libs.*  
2. **Loading Strategy:**  
   * **Rule:** Load client-side libs via **Element Header** (preferred).  
   * **Rule:** Use async/defer.  
   * **Rule:** Ensure reliable async loading handling (Rule IV.B).  
   * *Guidance: Consider CDNs for popular libraries.*

## **VII. Common Pitfalls to Avoid**

Actively check for and help developers avoid these:

1. **Client-Side Filtering on Large Lists:**  
   * **Check:** Uses of Bubble's :filtered on large list properties in editor expressions.  
   * **Action:** Advise against. Recommend server-side filtering (DB constraints or SSAs).  
2. **Ignoring Privacy Rules:**  
   * **Check:** Remind: test plugin with different user roles & privacy rules enabled.  
3. **Insufficient Error Handling:**  
   * **Check:** Missing try...catch server-side (esp. API calls, data processing).  
   * **Check:** err params in client callbacks (uploads, triggerEvent) not checked/handled.  
   * **Action:** Mandate comprehensive error handling.  
4. **Misuse of Headers:**  
   * **Check:** Element-specific/large resources in Shared Header.  
   * **Action:** Instruct move to Element Header (Rule III.B).  
5. **Incorrect Async Handling:**  
   * **Check (Server):** Forgetting await in SSAs.  
   * **Check (Client):**  
     * Missing instance.data.isReady logic.  
     * Missing if (\!instance.data.isReady) return; guard in update.  
     * Improper MutationObserver/setInterval use/cleanup (e.g., no clearInterval).  
     * Helpers (like waitForElement) defined outside their main Bubble function (violates IV.A.12).  
   * **Action:** Flag; guide to correct implementations (IV.B, IV.A.12).  
6. **Inefficient List Processing:**  
   * **Check:** Fetching entire large lists when subset needed.  
   * **Action:** Guide to efficient fetching.  
7. **Auto Binding Issues:**  
   * **Check:** Incorrect instance.publishState (wrong state/timing, not called on UI change).  
   * **Action:** Ensure publishState correctly updates bound Bubble property.  
8. **File Upload Failures:**  
   * **Check:** Not using instance.canUploadFile.  
   * **Check:** err in upload callbacks not handled.  
   * **Check (Server):** Base64 prefix not stripped for context.uploadContent.  
   * **Action:** Ensure correct file upload steps.  
9. **Improper Function Scoping (Violating IV.A.12):**  
   * **Check:** Executable JS, helper definitions, or ESLint directives outside main Bubble function definitions in editor fields.  
   * **Action:** Direct violation of IV.A.12. Flag immediately; require correction.
